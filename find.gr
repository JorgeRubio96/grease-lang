var testArr : [Int ; 5]
fn binarySearch(l : Int, r : Int, x :  Int) : Int
	if r ge l:
		var mid = (l + r) / 2

		if testArr[mid] eq x :
			return mid

		if testArr[mid] gt x : 
			return binarySearch(l, mid - 1, x)

		print mid + 1
		print '\n'

		return binarySearch(mid + 1, r, x)

	return -1

fn main() : Int
	var x = 5
	var i = 0

	while i lt 5:
		testArr[i] = i
		i = i + 1
	
	var res = binarySearch(0, 3, 5)
	if res eq -1 : 
		print 'N'
		print 'o'
		print ' '
		print 'e'
		print 'x'
		print 'i'
		print 's'
		print 't'
		print 'e'
		print '\n'
	else :
		print 'P'
		print 'r'
		print 'e'
		print 's'
		print 'e'
		print 'n'
		print 't'
		print 'e'
		print ':'
		print res

	return 0
