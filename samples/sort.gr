var a : [Int; 5]
var i : Int
var j : Int
var k : Int

fn swap(m: Int, n: Int)
	var tmp: Int
	tmp = a[m]
	a[m] = a[n]
	a[n] = tmp

fn quickSort(l : Int, r : Int)
	if r - l gt 1:
		i = l + 1
		j = l

		while i lt r:
			if a[l] gt a[i]:
				j = j + 1
				swap(i,j)
			i = i + 1

		swap(l,j)

		quickSort(l, j)
		quickSort(j + 1, r)

fn main() : Int
	var l : Int
	var m : Int
	var r : Int
	
	a[0] = 4
	a[1] = 5
	a[2] = 2
	a[3] = 3
	a[4] = 1

	var size = 5

	i = 0
	while i lt size :
		print a[i]
		print ' '
		i = i + 1

	print '\n'

	quickSort(0, size)

	i = 0
	while i lt size :
		print a[i]
		print ' '
		i = i + 1
	print '\n'
	return 0