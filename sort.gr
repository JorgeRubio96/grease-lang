var a : [Int; 5]
var i : Int
var j : Int
var k : Int


fn merge(l : Int, m : Int, r : Int)
	var n1 = m - l + 1
	var n2 = r - m
	i = 0
	j = 0

	i = 0
	j = 0
	k = l

	while i lt n1 and j lt n2 :
		if a[l + i] le a[m + 1 + j] :
			a[k] = a[l + i]
			i = i + 1
		else :
			a[k] = a[m + 1 + j]
			j = j + 1

		k = k + 1

	while i lt n1 :
		a[k] = a[l + i]
		i = i + 1
		k = k + 1

	while j lt n2 :
		a[k] = a[m + 1 + j]
		j = j + 1
		k = k + 1

fn mergeSort(l : Int, r : Int) 
	if l lt r :
		var m = l + (r - 1)/2
		mergeSort(l, m)
		mergeSort(m + 1, r)
		merge(l, m, r)


fn main() : Int
	var l : Int
	var m : Int
	var r : Int
	
	a[0] = 4
	a[1] = 5
	a[2] = 2
	a[3] = 3
	a[4] = 1

	var size = 5

	i = 0
	while i lt size :
		print a[i]
		print ' '
		i = i + 1

	mergeSort(0, size - 1)

	i = 0
	while i lt size :
		print a[i]
		print ' '
		i = i + 1
	print '\n'
	return 0